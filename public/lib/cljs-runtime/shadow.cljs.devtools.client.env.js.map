{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.env/client-id","cljs.core/random-uuid","goog/define","shadow.cljs.devtools.client.env/get-repl-host","and__3911__auto__","shadow.cljs.devtools.client.env/use-document-host","js/goog.global.document","cljs.core/seq","js/goog.global.document.hostname","js/document.location.hostname","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/get-ws-url-base","clojure.string/replace","js/Error","shadow.cljs.devtools.client.env/ws-url","client-type","cljs.core/Keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","cljs.core/name","shadow.cljs.devtools.client.env/ws-listener-url","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-print-fn","shadow.cljs.devtools.client.env/repl-pprint","cljs.core/pr-str","obj","sb__4430__auto__","js/goog.string.StringBuffer","*print-newline*28908","cljs.core/*print-newline*","*print-fn*28909","cljs.core/*print-fn*","x__4431__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/repl-error","e","G__28912","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","e28913","result","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","e28914","js/console.log","cljs.core/*e","shadow.cljs.devtools.client.env/reset-print-fn-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/set-print-fns!","msg-fn","original-print-fn","original-print-err-fn","cljs.core/*print-err-fn*","cljs.core/reset!","cljs.core/set-print-fn!","cljs.core/set-print-err-fn!","args","G__28915","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__28916","shadow.cljs.devtools.client.env/reset-print-fns!","temp__5457__auto__","cljs.core/deref","x","shadow.cljs.devtools.client.env/process-ws-msg","text","handler","*default-data-reader-fn*28923","cljs.tools.reader/*default-data-reader-fn*","tag","value","e28924","msg","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/console.warn","p__28925","p__28926","map__28927","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__28928","shadow.cljs.devtools.client.env/make-task-fn","log-missing-fn","log-call-async","log-call","fn-sym","fn-str","async","next","e28931","fn-obj","js/goog.getObjectByName","js/$CLJS","ex","p__28932","vec__28933","seq__28934","first__28935","cljs.core/first","cljs.core/next","shadow.cljs.devtools.client.env/do-js-reload*","task","remaining-tasks","G__28936","var_args","G__28940","shadow.cljs.devtools.client.env/do-js-reload","p__28941","map__28942","load-code-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","reload-info","complete-fn","load-tasks","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__28937#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__28938#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__28945","map__28946","shadow.cljs.devtools.client.env/before-load-src","type","ns","src","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","seq__28948","chunk__28949","count__28950","i__28951","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","js/goog.global.SHADOW_NS_RESET"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n(defonce client-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define repl-host \"\")\n\n(goog-define repl-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn get-repl-host []\n  (if (and use-document-host js/goog.global.document (seq js/goog.global.document.hostname))\n    js/document.location.hostname\n    repl-host))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-repl-host) \":\" repl-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [client-type]\n  {:pre [(keyword? client-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" client-id \"/\" (name client-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" client-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" client-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [[task & remaining-tasks]]\n  (when task\n    (task #(do-js-reload* remaining-tasks))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload msg load-code-fn (fn [])))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n"]}