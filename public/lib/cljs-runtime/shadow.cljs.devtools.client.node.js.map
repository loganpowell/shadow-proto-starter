{"version":3,"file":"shadow.cljs.devtools.client.node.js","sources":["shadow/cljs/devtools/client/node.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.node/client-id","cljs.core/random-uuid","shadow.cljs.devtools.client.node/ws-ref","cljs.core/volatile!","shadow.cljs.devtools.client.node/ws-close","temp__5461__auto__","cljs.core/deref","tcp","cljs.core/vreset!","shadow.cljs.devtools.client.node/ws-msg","msg","ws","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","err","js/console.error","p__28964","map__28965","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.node/node-eval","js","source-map-json","result","js/SHADOW_NODE_EVAL","shadow.cljs.devtools.client.node/is-loaded?","src","goog.object/get","js/SHADOW_IMPORTED","js/Error","shadow.cljs.devtools.client.node/closure-import","js/SHADOW_IMPORT","p__28967","map__28968","shadow.cljs.devtools.client.node/repl-init","id","repl-state","map__28970","repl-sources","seq__28972","cljs.core/seq","chunk__28974","count__28975","i__28976","map__28978","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__28980","cljs.core/first","cljs.core/next","output-name","cljs.core/not","p__29017","map__29018","shadow.cljs.devtools.client.node/repl-invoke","shadow.cljs.devtools.client.env/repl-call","shadow.cljs.devtools.client.env/repl-error","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__29020","map__29021","shadow.cljs.devtools.client.node/repl-set-ns","p__29023","map__29024","shadow.cljs.devtools.client.node/repl-require","sources","reload-namespaces","e29026","seq__29027","chunk__29028","count__29029","i__29030","map__29031","map__29033","provides","or__3922__auto__","cljs.core/some","e","p__29064","map__29065","shadow.cljs.devtools.client.node/build-complete","info","reload-info","map__29067","compiled","warnings","iter__4292__auto__","s__29070","cljs.core/LazySeq","xs__6012__auto__","map__29075","iterys__4288__auto__","s__29072","c__4290__auto__","size__4291__auto__","b__29074","cljs.core/chunk-buffer","i__29073","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29071","cljs.core/cons","cljs.core/rest","fs__4289__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__29069","resource-name","warning","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","map__29077","files-to-require","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__29082","map__29083","ns","cljs.core/contains?","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__29079","map__29080","resource-id","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$2","seq__29085","chunk__29086","count__29087","i__29088","shadow.cljs.devtools.client.env/before-load-src","p__29104","map__29105","shadow.cljs.devtools.client.node/process-message","type","G__29107","cljs.core/Keyword","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.node/ws-connect","url","shadow.cljs.devtools.client.env/ws-url","client","js/shadow.js.shim.module$ws","req","res","status","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/console.log","data","flags","e29109","shadow.cljs.devtools.client.env/process-ws-msg","shadow.cljs.devtools.client.env/enabled"],"sourcesContent":["(ns shadow.cljs.devtools.client.node\n  (:require [shadow.cljs.devtools.client.env :as env]\n            [\"ws\" :as ws]\n            [cljs.reader :as reader]\n            [goog.object :as gobj]))\n\n(defonce client-id (random-uuid))\n\n(defonce ws-ref (volatile! nil))\n\n(defn ws-close []\n  (when-some [tcp @ws-ref]\n    (.close tcp)\n    (vreset! ws-ref nil)))\n\n(defn ws-msg [msg]\n  (when-some [ws @ws-ref]\n    (.send ws (pr-str msg)\n      (fn [err]\n        (when err\n          (js/console.error \"REPL msg send failed\" err))))\n    ))\n\n(defn node-eval [{:keys [js source-map-json] :as msg}]\n  (let [result (js/SHADOW_NODE_EVAL js source-map-json)]\n    result))\n\n(defn is-loaded? [src]\n  (true? (gobj/get js/SHADOW_IMPORTED src)))\n\n(defn closure-import [src]\n  {:pre [(string? src)]}\n  (js/SHADOW_IMPORT src))\n\n(defn repl-init\n  [{:keys [id repl-state] :as msg}]\n  (let [{:keys [repl-sources]} repl-state]\n\n    (doseq [{:keys [output-name] :as src} repl-sources\n            :when (not (is-loaded? output-name))]\n      (closure-import output-name))\n\n    (ws-msg {:type :repl/init-complete :id id})\n    ))\n\n(defn repl-invoke [{:keys [id] :as msg}]\n  (let [result\n        (-> (env/repl-call #(node-eval msg) env/repl-error)\n            (assoc :id id))]\n\n    (ws-msg result)))\n\n(defn repl-set-ns [{:keys [id] :as msg}]\n  ;; nothing for the client to do really\n  (ws-msg {:type :repl/set-ns-complete :id id}))\n\n(defn repl-require\n  [{:keys [id sources reload-namespaces] :as msg}]\n  (try\n    (doseq [{:keys [provides output-name] :as src} sources]\n      (when (or (not (is-loaded? output-name))\n                (some reload-namespaces provides))\n        (closure-import output-name)))\n    (ws-msg {:type :repl/require-complete :id id})\n\n    (catch :default e\n      (js/console.error \"repl/require failed\" e)\n      (ws-msg {:type :repl/require-error :id id})\n      )))\n\n(defn build-complete\n  [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n      \n      (let [{:keys [sources compiled]}\n            info\n\n            files-to-require\n            (->> sources\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter (fn [{:keys [ns resource-id]}]\n                           (or (contains? compiled resource-id)\n                               (contains? (:always-load reload-info) ns))))\n                 (map :output-name)\n                 (into []))]\n\n        (when (seq files-to-require)\n          (env/do-js-reload\n            msg\n            #(doseq [src files-to-require]\n               (env/before-load-src src)\n               (closure-import src))\n            ))))))\n\n(defn process-message\n  [{:keys [type] :as msg}]\n  ;; (js/console.log \"repl-msg\" msg)\n  (case type\n    :repl/init\n    (repl-init msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :build-start\n    :ignored\n\n    :build-complete\n    (build-complete msg)\n\n    :worker-shutdown\n    (.terminate @ws-ref)\n\n    ;; default\n    (prn [:repl-unknown msg])\n    ))\n\n(defn ws-connect []\n  (let [url\n        (env/ws-url :node)\n\n        client\n        (ws. url [])]\n\n    (.on client \"open\"\n      (fn []\n        (vreset! ws-ref client)))\n\n    (.on client \"unexpected-response\"\n      (fn [req res]\n        (let [status (.-statusCode res)]\n          (if (= 406 status)\n            (js/console.log \"REPL connection rejected, probably stale JS connecting to new server.\")\n            (js/console.log \"REPL unexpected error\" (.-statusCode res))\n            ))))\n\n    (.on client \"message\"\n      (fn [data flags]\n        (try\n          (env/process-ws-msg data process-message)\n          (catch :default e\n            (js/console.error \"failed to process message\" data e)))))\n\n    (.on client \"close\"\n      (fn []\n        (js/console.log \"REPL client disconnected\")\n        ))\n\n    (.on client \"error\"\n      (fn [err]\n        (js/console.log \"REPL client error\" err)))\n    ))\n\n(when env/enabled\n  (ws-close) ;; if this is reloaded, reconnect the socket\n  (ws-connect))\n\n"]}