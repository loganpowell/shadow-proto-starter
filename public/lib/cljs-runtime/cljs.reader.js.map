{"version":3,"file":"cljs.reader.js","sources":["cljs/reader.cljs"],"mappings":"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","names":["cljs.reader/zero-fill-right-and-truncate","s","width","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","b","goog/string.StringBuffer","cljs.reader/divisible?","num","div","cljs.core/mod","cljs.reader/indivisible?","cljs.core/not","cljs.reader/leap-year?","year","and__3911__auto__","or__3922__auto__","cljs.reader/days-in-month","dim-norm","dim-leap","month","leap-year?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.reader/timestamp-regex","cljs.reader/parse-int","n","js/parseInt","js/isNaN","cljs.reader/check","low","high","msg","js/Error","cljs.reader/parse-and-validate-timestamp","vec__28082","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","years","months","days","hours","minutes","seconds","fraction","offset-sign","offset-hours","offset-minutes","v","cljs.core/re-matches","offset","G__28085","G__28086","cljs.reader/parse-timestamp","ts","temp__5455__auto__","vec__28094","ms","js/Date","cljs.reader/read-date","cljs.reader/read-queue","elems","cljs.core/vector?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentQueue.EMPTY","cljs.reader/read-js","form","arr","seq__28101","cljs.core/seq","chunk__28102","count__28103","i__28104","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","x","cljs.core/map?","obj","seq__28107","chunk__28108","count__28109","i__28110","vec__28111","vec__28120","k","G__28114","G__28115","G__28116","G__28123","G__28124","G__28125","goog.object/set","cljs.core/name","cljs.reader/read-uuid","uuid","cljs.core/uuid","cljs.reader/*default-data-reader-fn*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.reader/*tag-table*","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","var_args","G__28190","cljs.reader/read","p__28191","map__28192","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","reader","cljs.core/deref","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","eof","opts","cljs.core.update.cljs$core$IFn$_invoke$arity$3","m","eof-error?","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","G__28207","cljs.reader/read-string","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.reader/register-tag-parser!","tag","f","old-parser","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.reader/deregister-tag-parser!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.reader/register-default-tag-parser!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.reader/deregister-default-tag-parser!"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.reader\n  (:require-macros [cljs.reader :refer [add-data-readers]])\n  (:require [goog.object :as gobject]\n            [cljs.tools.reader :as treader]\n            [cljs.tools.reader.edn :as edn])\n  (:import [goog.string StringBuffer]))\n\n(defn ^:private zero-fill-right-and-truncate [s width]\n  (cond\n    (= width (count s)) s\n    (< width (count s)) (subs s 0 width)\n    :else\n    (loop [b (StringBuffer. s)]\n      (if (< (.getLength b) width)\n        (recur (.append b \"0\"))\n        (.toString b)))))\n\n(defn ^:private divisible?\n  [num div]\n  (zero? (mod num div)))\n\n(defn ^:private indivisible?\n  [num div]\n  (not (divisible? num div)))\n\n(defn ^:private leap-year?\n  [year]\n  (and (divisible? year 4)\n       (or (indivisible? year 100)\n           (divisible? year 400))))\n\n(def ^:private days-in-month\n  (let [dim-norm [nil 31 28 31 30 31 30 31 31 30 31 30 31]\n        dim-leap [nil 31 29 31 30 31 30 31 31 30 31 30 31]]\n    (fn [month leap-year?]\n      (get (if leap-year? dim-leap dim-norm) month))))\n\n(def ^:private timestamp-regex #\"(\\d\\d\\d\\d)(?:-(\\d\\d)(?:-(\\d\\d)(?:[T](\\d\\d)(?::(\\d\\d)(?::(\\d\\d)(?:[.](\\d+))?)?)?)?)?)?(?:[Z]|([-+])(\\d\\d):(\\d\\d))?\")\n\n(defn ^:private parse-int [s]\n  (let [n (js/parseInt s 10)]\n    (if-not (js/isNaN n)\n      n)))\n\n(defn ^:private check [low n high msg]\n  (when-not (<= low n high)\n    (throw (js/Error. (str msg \" Failed:  \" low \"<=\" n \"<=\" high))))\n  n)\n\n(defn parse-and-validate-timestamp [s]\n  (let [[_ years months days hours minutes seconds fraction offset-sign offset-hours offset-minutes :as v]\n        (re-matches timestamp-regex s)]\n    (if-not v\n      (throw (js/Error. (str \"Unrecognized date/time syntax: \" s)))\n      (let [years (parse-int years)\n            months (or (parse-int months) 1)\n            days (or (parse-int days) 1)\n            hours (or (parse-int hours) 0)\n            minutes (or (parse-int minutes) 0)\n            seconds (or (parse-int seconds) 0)\n            fraction (or (parse-int (zero-fill-right-and-truncate fraction 3)) 0)\n            offset-sign (if (= offset-sign \"-\") -1 1)\n            offset-hours (or (parse-int offset-hours) 0)\n            offset-minutes (or (parse-int offset-minutes) 0)\n            offset (* offset-sign (+ (* offset-hours 60) offset-minutes))]\n        [years\n         (check 1 months 12 \"timestamp month field must be in range 1..12\")\n         (check 1 days (days-in-month months (leap-year? years)) \"timestamp day field must be in range 1..last day in month\")\n         (check 0 hours 23 \"timestamp hour field must be in range 0..23\")\n         (check 0 minutes 59 \"timestamp minute field must be in range 0..59\")\n         (check 0 seconds (if (= minutes 59) 60 59) \"timestamp second field must be in range 0..60\")\n         (check 0 fraction 999 \"timestamp millisecond field must be in range 0..999\")\n         offset]))))\n\n(defn parse-timestamp\n  [ts]\n  (if-let [[years months days hours minutes seconds ms offset]\n           (parse-and-validate-timestamp ts)]\n    (js/Date.\n      (- (.UTC js/Date years (dec months) days hours minutes seconds ms)\n        (* offset 60 1000)))\n    (throw (js/Error. (str \"Unrecognized date/time syntax: \" ts)))))\n\n(defn ^:private read-date\n  [s]\n  (if (string? s)\n    (parse-timestamp s)\n    (throw (js/Error. \"Instance literal expects a string for its timestamp.\"))))\n\n(defn ^:private read-queue\n  [elems]\n  (if (vector? elems)\n    (into cljs.core/PersistentQueue.EMPTY elems)\n    (throw (js/Error. \"Queue literal expects a vector for its elements.\"))))\n\n(defn ^:private read-js\n  [form]\n  (cond\n    (vector? form)\n    (let [arr (array)]\n      (doseq [x form]\n        (.push arr x))\n      arr)\n\n    (map? form)\n    (let [obj (js-obj)]\n      (doseq [[k v] form]\n        (gobject/set obj (name k) v))\n      obj)\n\n    :else\n    (throw\n      (js/Error.\n        (str \"JS literal expects a vector or map containing \"\n             \"only string or unqualified keyword keys\")))))\n\n(defn ^:private read-uuid\n  [uuid]\n  (if (string? uuid)\n    (cljs.core/uuid uuid)\n    (throw (js/Error. \"UUID literal expects a string as its representation.\"))))\n\n(def ^:dynamic *default-data-reader-fn*\n  (atom nil))\n\n(def ^:dynamic *tag-table*\n  (atom\n    (add-data-readers\n      {'inst  read-date\n       'uuid  read-uuid\n       'queue read-queue\n       'js    read-js})))\n\n(defn read\n  \"Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader]\n   (edn/read\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil}\n     reader))\n  ([{:keys [eof] :as opts} reader]\n   (edn/read\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))) reader))\n  ([reader eof-error? eof opts]\n   (edn/read reader eof-error? eof\n     (update (merge opts {:default @*default-data-reader-fn*})\n       :readers (fn [m] (merge @*tag-table* m))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s]\n   (edn/read-string\n     {:readers @*tag-table*\n      :default @*default-data-reader-fn*\n      :eof nil} s))\n  ([opts s]\n   (edn/read-string\n     (update (merge {:default @*default-data-reader-fn*} opts)\n       :readers (fn [m] (merge @*tag-table* m))) s)))\n\n(defn register-tag-parser!\n  [tag f]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* assoc tag f)\n    old-parser))\n\n(defn deregister-tag-parser!\n  [tag]\n  (let [old-parser (get @*tag-table* tag)]\n    (swap! *tag-table* dissoc tag)\n    old-parser))\n\n(defn register-default-tag-parser!\n  [f]\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] f))\n    old-parser))\n\n(defn deregister-default-tag-parser!\n  []\n  (let [old-parser @*default-data-reader-fn*]\n    (swap! *default-data-reader-fn* (fn [_] nil))\n    old-parser))\n"]}