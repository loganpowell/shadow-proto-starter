{"version":3,"file":"shadow.util.js","sources":["shadow/util.cljs"],"mappings":"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","names":["shadow.util/console-friendly","a","cljs.core/Keyword","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","shadow.util/go!","seq32829","self__4487__auto__","cljs.core/seq","body","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","shadow.util/console?","js/console","G__32847","shadow.util/log","args-arr__4514__auto__","argseq__4515__auto__","seq32840","G__32841","cljs.core/first","cljs.core/next","G__32842","G__32843","G__32844","G__32845","G__32846","self__4486__auto__","a1","a2","a3","a4","a5","a6","more","shadow.util/remove-from-vector","coll","key","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__32883","vec__32884","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","idx","item","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/transient","cljs.core/persistent!","shadow.util/remove-item-from-coll","value","cljs.core/IVector","cljs.core/IMap","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/ISet","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns shadow.util\n  (:require-macros [shadow.util :as m])\n  (:require [cljs.core.async :as async])) ;; not really used here, but the go! macro needs this\n\n(defn console-friendly [a]\n  (cond\n   (nil? a) \"nil\"\n   (keyword? a) (str a)\n   (string? a) a\n   (number? a) a\n   (satisfies? IPrintWithWriter a) (pr-str a)\n   :else a\n   ))\n\n(defn go! [& body]\n  (throw (ex-info \"go! is a macro\" {})))\n\n(def console? (exists? js/console))\n\n(defn log\n  ([a1]\n     (when console?\n       (.log js/console\n             (console-friendly a1))))\n  ([a1 a2]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2))))\n  ([a1 a2 a3]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3))))\n  ([a1 a2 a3 a4]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4))))\n  ([a1 a2 a3 a4 a5]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5))))\n  ([a1 a2 a3 a4 a5 a6]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6))))\n  ([a1 a2 a3 a4 a5 a6 & more]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6)\n             \"more:\"\n             (pr-str more)))))\n\n;; HAX\n(comment\n  (def default-ex-info js/cljs.core.ex-info)\n\n  (set! (.. js/cljs -core -ex-info)\n    (fn shadow-ex-info\n      ([msg map]\n       (m/log \"EX-INFO:\" msg map)\n       (default-ex-info msg map))\n      ([msg map cause]\n       (m/log \"EX-INFO:\" msg map cause)\n       (default-ex-info msg map cause))\n      )))\n\n\n(defn remove-from-vector [coll key]\n  (->> (map-indexed vector coll)\n       (reduce (fn [v [idx item]]\n                 (if (= idx key)\n                   v\n                   (conj! v item)))\n               (transient []))\n       (persistent!)))\n\n(defn remove-item-from-coll [coll key value]\n  (cond\n   (satisfies? IVector coll)\n   (remove-from-vector coll key)\n   (satisfies? IMap coll)\n   (dissoc coll key)\n   (satisfies? ISet coll)\n   (disj coll value)\n   :else (throw (ex-info \"unknown coll type\" {:coll coll :key key :value value}))\n   ))\n"]}