{"version":3,"file":"cljs.tools.reader.edn.js","sources":["cljs/tools/reader/edn.cljs"],"mappings":"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","names":["cljs.tools.reader.edn/macro-terminating?","ch","and__3911__auto__","cljs.tools.reader.edn/macros","cljs.tools.reader.edn/not-constituent?","var_args","G__27602","cljs.tools.reader.edn/read-token","js/Error","rdr","kind","initch","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$4","validate-leading?","cljs.core/not","cljs.tools.reader.impl.errors/throw-eof-at-start","cljs.tools.reader.impl.errors/throw-bad-char","sb","goog/string.StringBuffer","cljs.tools.reader.reader-types/unread","cljs.tools.reader.impl.utils/whitespace?","G__27603","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.edn/read-dispatch","_","opts","temp__5455__auto__","dm","cljs.tools.reader.edn/dispatch-macros","obj","G__27607","G__27608","G__27609","cljs.tools.reader.edn/read-tagged","G__27610","cljs.tools.reader.impl.errors/throw-no-dispatch","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-unmatched-delimiter","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","G__27612","cljs.tools.reader.edn/read-unicode-char","token","offset","length","base","l","cljs.core/count","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","i","uc","js/String.fromCharCode","d","cljs.tools.reader/char-code","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","exact?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","or__3922__auto__","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.edn/upper-limit","cljs.tools.reader.edn/lower-limit","cljs.tools.reader.edn/read-char*","backslash","token-len","goog.string/startsWith","c","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$4","ic","cljs.tools.reader.impl.errors/throw-invalid-character-literal","len","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.edn/read-delimited","delim","vec__27618","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","start-line","start-column","cljs.tools.reader.impl.utils/char","a","cljs.core/transient","cljs.tools.reader.impl.commons/read-past","cljs.tools.reader.impl.errors.throw_eof_delimited.cljs$core$IFn$_invoke$arity$5","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/persistent!","macrofn","mret","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","o","G__27621","G__27622","G__27623","G__27624","cljs.tools.reader.edn/read","G__27625","cljs.tools.reader.edn/read-list","the-list","cljs.core/empty?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/list","cljs.tools.reader.edn/read-vector","cljs.tools.reader.edn/read-map","vec__27628","the-map","map-count","ks","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","key-set","cljs.core/set","cljs.core/odd?","cljs.tools.reader.impl.errors/throw-odd-map","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","cljs.core/to-array","cljs.core/PersistentHashMap","cljs.tools.reader.edn/read-number","G__27631","s","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.errors/throw-invalid-number","G__27632","cljs.tools.reader.edn/escape-char","G__27635","js/parseInt","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.edn.read_unicode_char.cljs$core$IFn$_invoke$arity$5","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.edn/read-string*","G__27637","cljs.tools.reader.impl.errors.throw_eof_reading.cljs$core$IFn$_invoke$arity$variadic","G__27638","G__27639","cljs.tools.reader.edn/read-symbol","temp__5457__auto__","cljs.tools.reader.edn.read_token.cljs$core$IFn$_invoke$arity$3","G__27644","p","cljs.tools.reader.impl.commons/parse-symbol","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.edn/read-keyword","reader","ns","name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.errors/throw-single-colon","cljs.tools.reader.edn/wrapping-reader","sym","cljs.core/List","cljs.tools.reader.edn/read-meta","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.core/map?","cljs.tools.reader.impl.errors/throw-bad-metadata","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/meta","cljs.tools.reader.impl.errors/throw-bad-metadata-target","cljs.tools.reader.edn/read-set","coll","the-set","cljs.tools.reader.edn/read-discard","G__27647","cljs.tools.reader.edn/read-namespaced-map","G__27648","cljs.tools.reader.impl.utils/second'","items","keys","cljs.tools.reader.impl.utils/namespace-keys","vals","cljs.core/rest","cljs.core/zipmap","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/read-symbolic-value","G__27649","js/Number.NaN","js/Number.NEGATIVE_INFINITY","js/Number.POSITIVE_INFINITY","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","G__27650","cljs.tools.reader.impl.commons/read-comment","G__27652","cljs.tools.reader.impl.commons/throwing-reader","tag","object","cljs.core/Symbol","cljs.tools.reader.impl.errors/throw-bad-reader-tag","f","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader/default-data-readers","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","G__27655","p__27656","map__27657","cljs.core/hash-map","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$2","eof","eof-error?","cljs.core/contains?","cljs.tools.reader.edn.read.cljs$core$IFn$_invoke$arity$4","e27659","cljs.tools.reader.impl.errors/throw-eof-error","cljs.tools.reader.impl.commons/number-literal?","res","e","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ex-data","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.reader-types/get-file-name","G__27662","cljs.tools.reader.edn/read-string","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second']]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers char-code]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (if-let [obj (read-tagged (doto rdr (unread ch)) ch opts)]\n        obj\n        (err/throw-no-dispatch rdr ch)))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}