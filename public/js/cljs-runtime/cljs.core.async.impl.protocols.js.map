{"version":3,"file":"cljs.core.async.impl.protocols.js","sources":["cljs/core/async/impl/protocols.cljs"],"mappings":"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","names":["cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","x__4211__auto__","m__4212__auto__","cljs/core.async.impl.protocols.take!","goog/typeOf","cljs.core/missing-protocol","cljs.core.async.impl.protocols/ReadPort","cljs.core.async.impl.protocols/take!","port","fn1-handler","cljs/core.async.impl.protocols.put!","cljs.core.async.impl.protocols/WritePort","cljs.core.async.impl.protocols/put!","val","cljs/core.async.impl.protocols.close!","cljs/core.async.impl.protocols.closed?","cljs.core.async.impl.protocols/Channel","cljs.core.async.impl.protocols/close!","chan","cljs.core.async.impl.protocols/closed?","cljs/core.async.impl.protocols.active?","cljs/core.async.impl.protocols.blockable?","cljs/core.async.impl.protocols.commit","cljs.core.async.impl.protocols/Handler","cljs.core.async.impl.protocols/active?","h","cljs.core.async.impl.protocols/blockable?","cljs.core.async.impl.protocols/commit","cljs/core.async.impl.protocols.full?","cljs/core.async.impl.protocols.remove!","cljs/core.async.impl.protocols.add!*","cljs/core.async.impl.protocols.close-buf!","cljs.core.async.impl.protocols/Buffer","cljs.core.async.impl.protocols/full?","b","cljs.core.async.impl.protocols/remove!","cljs.core.async.impl.protocols/add!*","itm","cljs.core.async.impl.protocols/close-buf!","var_args","G__28066","cljs.core.async.impl.protocols/add!","js/Error","cljs.core.async.impl.protocols/UnblockingBuffer"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.protocols)\n\n(def ^:const MAX-QUEUE-SIZE 1024)\n\n(defprotocol ReadPort\n  (take! [port fn1-handler] \"derefable val if taken, nil if take was enqueued\"))\n\n(defprotocol WritePort\n  (put! [port val fn1-handler] \"derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.\"))\n\n(defprotocol Channel\n  (close! [chan])\n  (closed? [chan]))\n\n(defprotocol Handler\n  (active? [h] \"returns true if has callback. Must work w/o lock\")\n  (blockable? [h] \"returns true if this handler may be blocked, otherwise it must not block\")\n  #_(lock-id [h] \"a unique id for lock acquisition order, 0 if no lock\")\n  (commit [h] \"commit to fulfilling its end of the transfer, returns cb. Must be called within lock\"))\n\n(defprotocol Buffer\n  (full? [b] \"returns true if buffer cannot accept put\")\n  (remove! [b] \"remove and return next item from buffer, called under chan mutex\")\n  (add!* [b itm] \"if room, add item to the buffer, returns b, called under chan mutex\")\n  (close-buf! [b] \"called on chan closed under chan mutex, return ignored\"))\n\n(defn add!\n  ([b] b)\n  ([b itm]\n     (assert (not (nil? itm)))\n     (add!* b itm)))\n\n;; Defines a buffer that will never block (return true to full?)\n(defprotocol UnblockingBuffer)\n"]}