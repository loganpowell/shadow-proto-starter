{"version":3,"file":"shadow.xhr.js","sources":["shadow/xhr.cljs"],"mappings":"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","names":["shadow.xhr/result-chain","res","handler","goog.result/chain","var_args","args__4502__auto__","len__4499__auto__","i__4500__auto__","argseq__4503__auto__","cljs.core/IndexedSeq","shadow.xhr/result-combine","seq33852","self__4487__auto__","cljs.core/seq","results","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","goog.result/combine","shadow.xhr/result-wait-on-success","callback","goog.result/waitOnSuccess","shadow.xhr/result-success?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/goog.result.Result.State.SUCCESS","shadow.xhr/result-value","shadow.xhr/result-immediate","value","goog.result/successfulResult","shadow.xhr/result-error","goog.result/waitOnError","shadow.xhr/edn-transform","body","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.xhr/json-transform","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON","shadow.xhr/goog-keys","shadow.xhr/make-request-options","options","obj","seq__33862","chunk__33863","count__33864","i__33865","vec__33866","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4319__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__33869","cljs.core/first","cljs.core/next","k","v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","shadow.xhr/content-transforms","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","shadow.xhr/register-transform","content-type","transform-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","shadow.xhr/auto-transform","req","ct","clojure.string/lower-case","sep","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__33897","shadow.xhr/make-url","url","params","G__33898","G__33899","goog.uri.utils/appendParamsFromMap","shadow.xhr/transform-request-body","data","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shadow.xhr/as-url","input","cljs.core/vector?","cljs.core/map?","cljs.core/second","vec__33901","shadow.xhr/e->data","e","shadow.xhr/event-handler","events","event-type","c","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","shadow.xhr/request-ok?","status","shadow.xhr/request-error?","G__33921","shadow.xhr/chan","js/Error","p__33927","map__33928","cljs.core/hash-map","method","shadow.xhr.chan.cljs$core$IFn$_invoke$arity$4","upload","body-only","vec__33931","js/XMLHttpRequest","body?","result-chan","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","and__3911__auto__","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","error-handler","temp__5455__auto__","transform","G__33940","G__33941","cljs.core/name","G__33959","shadow.xhr/request","shadow.xhr.request.cljs$core$IFn$_invoke$arity$4","cljs.core/contains?","vec__33960","G__33963","G__33964","G__33965","G__33966","goog.labs.net.xhr/send","cljs.core/assoc-in","js/goog.result.SimpleResult.fromPromise","goog.result/transform","shadow.xhr/upload","seq33969","G__33970","G__33971","self__4486__auto__","file","xhr","seq__33972","chunk__33974","count__33975","i__33976","vec__33978","vec__33981","ev-id","ev-handler","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","target","G__33984"],"sourcesContent":["(ns shadow.xhr\n  \"FIXME: rewrite to using promises, since closure is deprecating result\"\n  (:require [goog.result :as gresult]\n            goog.result.SimpleResult\n            [goog.labs.net.xhr :as gxhr]\n            [cljs.reader :as cr]\n            [goog.uri.utils :as gutils]\n            [goog.json :as gjson]\n            [shadow.object :as so]\n            [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [shadow.util :as util :refer (log)]\n            ))\n\n(defn result-chain [res handler]\n  (gresult/chain res handler))\n\n(defn result-combine [& results]\n  (apply gresult/combine results))\n\n(defn result-wait-on-success [res callback]\n  (gresult/waitOnSuccess res callback))\n\n(defn result-success? [res]\n  (= js/goog.result.Result.State.SUCCESS (.getState res)))\n\n(defn result-value [res]\n  (.getValue res))\n\n(defn result-immediate [value]\n  (gresult/successfulResult value))\n\n(defn result-error [res callback]\n  (gresult/waitOnError res callback))\n\n;; FIXME: this whole module is a mess ...\n\n(defn- edn-transform [body]\n  (cr/read-string body))\n\n(defn- json-transform [body]\n  (js->clj (.parse js/JSON body)))\n\n(def goog-keys {:timeout \"timeoutMs\"\n                :with-credentials \"withCredentials\"\n                :headers \"headers\"\n                :mime-type \"mimeType\"\n                })\n\n(defn make-request-options [options]\n  (let [obj (js-obj)]\n    (doseq [[k v] options]\n      (aset obj (get goog-keys k) (clj->js v)))\n    obj\n    ))\n\n(def content-transforms\n  (atom\n    {\"text/edn\" edn-transform\n     \"application/edn\" edn-transform\n     \"application/json\" json-transform\n     \"text/html\" identity\n     \"text/plain\" identity}))\n\n(defn register-transform [content-type transform-fn]\n  (swap! content-transforms assoc content-type transform-fn))\n\n(defn auto-transform [req]\n  (let [content-type (let [ct (str/lower-case (.getResponseHeader req \"Content-Type\"))\n                           sep (.indexOf ct \";\")]\n                       (if (not= -1 sep)\n                         (.substring ct 0 sep)\n                         ct))\n        transform-fn (get @content-transforms content-type)]\n    (if (nil? transform-fn)\n      (throw (ex-info \"unsupported content-type\" {:req req :content-type content-type}))\n      (transform-fn (.-responseText req)))))\n\n(defn make-url [url params]\n  (gutils/appendParamsFromMap url (clj->js params)))\n\n(defn transform-request-body [data]\n  (cond\n    (string? data)\n    [\"text/plain; charset=utf-8\" data]\n    (satisfies? IPrintWithWriter data)\n    [\"text/edn; charset=utf-8\" (pr-str data)]\n    :default\n    [\"application/octet-stream\" data]\n    ))\n\n(defn as-url [input]\n  (cond\n    (string? input)\n    input\n\n    (and (vector? input)\n         (= 2 (count input))\n         (string? (first input))\n         (map? (second input)))\n    (let [[url params] input]\n      (make-url url params))\n\n    :else\n    (throw (ex-info \"doesnt look like an url\" {:input input}))\n    ))\n\n(defn e->data [e]\n  e)\n\n(defn event-handler [req events event-type]\n  (fn [e]\n    (cond\n      (map? events)\n      (when-let [c (get events event-type)]\n        (async/put! c [req (e->data e)]))\n\n      (not (nil? events))\n      (async/put! events [event-type req (e->data e)])\n\n      :else\n      nil)))\n\n(defn request-ok? [status]\n  (= 200 status))\n\n(defn request-error? [status]\n  (>= status 400))\n\n(defn chan\n  \"creates a channel and performs xhr request like (chan :GET \\\"/something\\\")\n\n   accepts url as string or [url params]\n\n   this channel will receive one message [status body req] on load\n   loadend will close the result channel, so you will get nil results on request errors/timeouts\n\n   use options hash to pass in extra channels\n\n   (chan :POST \\\"/something\\\" some-data {:events chan-or-map\n                                         :upload chan-or-map})\n\n   when given a chan that channels receives messages in form of [event-type event-data req]\n   when given a map a channel is expected for each eventtype and will receive [event-data req]\n   {:timeout some-chan}, if no channel for a given event is present, no message is sent\n\n   event types are :loadstart :progress :abort :error :timeout :loadend :load (see xhr spec)\n   only exception is that status >= 500 does not return a result and produces an error event instead\"\n\n  ([method url]\n   (chan method url nil {}))\n  ([method url data]\n   (chan method url data {}))\n  ([method url data {:keys [events\n                            upload\n                            body-only]\n                     :as options}]\n   (let [req (js/XMLHttpRequest.)\n         body? (not= :GET method)\n         [content-type body] (if body?\n                               (transform-request-body data)\n                               [nil nil])\n         result-chan (async/chan 1)]\n\n     (when (and body? upload)\n       (dom/on (.-upload req) :loadstart (event-handler req upload :loadstart))\n       (dom/on (.-upload req) :progress (event-handler req upload :progress))\n       (dom/on (.-upload req) :abort (event-handler req upload :abort))\n       (dom/on (.-upload req) :error (event-handler req upload :error))\n       (dom/on (.-upload req) :timeout (event-handler req upload :timeout))\n       (dom/on (.-upload req) :loadend (event-handler req upload :loadend))\n       (dom/on (.-upload req) :load (event-handler req upload :loadend)))\n\n     (dom/on req :loadstart (event-handler req events :loadstart))\n     (dom/on req :progress (event-handler req events :progress))\n     (dom/on req :abort (event-handler req events :abort))\n     (dom/on req :timeout (event-handler req events :timeout))\n\n     (dom/on req :loadend (let [callback (event-handler req events :loadend)]\n                            (fn [e]\n                              (callback e)\n                              (async/close! result-chan))))\n\n     (let [error-handler (event-handler req events :error)]\n       (dom/on req :error error-handler)\n\n       (dom/on req :load (let [callback (event-handler req events :load)]\n                           (fn [e]\n                             (let [status (.-status req)\n                                   body\n                                   (if-let [transform (:transform options)]\n                                     (transform (.-responseText req) req)\n                                     (auto-transform req))]\n                               (if (request-error? status)\n                                 (error-handler e)\n                                 (do (callback e)\n                                     (if body-only\n                                       (async/put! result-chan body)\n                                       (async/put! result-chan [status body req])))))))))\n\n     (.open req (name method) (as-url url) true)\n\n     ;; must set after open\n     ;; FIXME: bad for CORS! but who uses http auth for anything serious?\n     (set! (.-responseType req) \"text\")\n     (set! (.-withCredentials req) (not (false? (:with-credentials options))))\n\n     (when body?\n       (.setRequestHeader req \"Content-Type\" content-type))\n\n     (if body?\n       (.send req body)\n       (.send req))\n\n     result-chan\n     )))\n\n(defn request\n  ([method url]\n   (request method url nil {}))\n  ([method url data]\n   (request method url data {}))\n  ([method url data options]\n   (when (and (not (contains? #{:GET :DELETE} method)) (nil? data))\n     (throw (ex-info \"request needs data\" {:method method :url url :data data :options options})))\n\n   (let [body? (not (or (= :GET method) (nil? data)))\n         [content-type body] (transform-request-body data)\n         req (gxhr/send (name method)\n               (if (and (= :GET method) data)\n                 (make-url url data)\n                 url)\n               (when body?\n                 body)\n               (make-request-options\n                 (if body?\n                   (assoc-in options [:headers \"Content-Type\"] content-type)\n                   options))\n               )\n         req (js/goog.result.SimpleResult.fromPromise req)\n         ]\n     (gresult/transform req auto-transform))))\n\n(defn upload [url file & events]\n  (let [xhr (js/XMLHttpRequest.)]\n    (doseq [[ev-id ev-handler] (partition 2 events)\n            :let [target (if (= :progress ev-id) (aget xhr \"upload\") xhr)]]\n      (.addEventListener target (name ev-id) ev-handler))\n    (doto xhr\n      (.open \"PUT\" url)\n      (.send file))))\n"]}