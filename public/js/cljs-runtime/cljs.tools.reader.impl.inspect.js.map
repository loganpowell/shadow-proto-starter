{"version":3,"file":"cljs.tools.reader.impl.inspect.js","sources":["cljs/tools/reader/impl/inspect.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.inspect/inspect*-col","truncate","col","start","end","n","cljs.core/count","l","x__4009__auto__","y__4010__auto__","elements","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.inspect/inspect*","cljs.core.take.cljs$core$IFn$_invoke$arity$2","content","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","suffix","cljs.tools.reader.impl.inspect/dispatch-inspect","_","x","cljs.core/Keyword","cljs.core/Symbol","cljs.core/vector?","cljs.core/list?","cljs.core/map?","cljs.core/set?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","method-table__4382__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4383__auto__","method-cache__4384__auto__","cached-hierarchy__4385__auto__","hierarchy__4386__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/-add-method","cljs.core/IndexedSeq","cljs.core/PersistentArrayMapSeq","cljs.core/NodeSeq","cljs.core/Cons","cljs.core/LazySeq","m","len","n-shown","contents","cljs.core/concat","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","var_args","G__26981","cljs.tools.reader.impl.inspect/inspect","js/Error"],"sourcesContent":[";;   Copyright (c) Russ Olsen, Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.inspect)\n\n(declare inspect*)\n\n(defn- inspect*-col [truncate col start end]\n  (let [n (count col)\n        l (if truncate 0 (min 10 n))\n        elements (map (partial inspect* true) (take l col))\n        content (apply str (interpose \" \" elements))\n        suffix (if (< l n) \"...\")]\n    (str start content suffix end)))\n\n(defn- dispatch-inspect\n  [_ x]\n  (cond\n   (nil? x) :nil\n   (string? x) :string\n   (keyword? x) :strable\n   (number? x) :strable\n   (symbol? x) :strable\n   (vector? x) :vector\n   (list? x)  :list\n   (map? x) :map\n   (set? x) :set\n   (= x true) :strable\n   (= x false) :strable\n   :default (type x)))\n\n(defmulti inspect* dispatch-inspect)\n\n(defmethod inspect* :string [truncate ^String x]\n  (let [n (if truncate 5 20)\n        suffix (if (> (.-length x) n) \"...\\\"\" \"\\\"\")]\n    (str\n      \\\"\n      (.substring ^String x 0 (min n (.-length x)))\n      suffix)))\n\n(defmethod inspect* :strable [truncate x] (str x))\n\n(defmethod inspect* cljs.core/IndexedSeq [truncate x]\n  \"<indexed seq>\")\n\n(defmethod inspect* cljs.core/PersistentArrayMapSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/NodeSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/Cons [truncate x] \"<cons>\")\n\n(defmethod inspect* cljs.core/LazySeq [truncate x] \"<lazy seq>\")\n\n(defmethod inspect* :nil [_ _] \"nil\")\n\n(defmethod inspect* :list [truncate col]\n  (inspect*-col truncate col \\( \\)))\n\n(defmethod inspect* :map [truncate m]\n  (let [len (count m)\n        n-shown (if truncate 0 len)\n        contents (apply concat (take n-shown m))\n        suffix (if (> len n-shown) \"...}\" \\})]\n    (inspect*-col truncate contents \\{ suffix)))\n\n(defmethod inspect* :set [truncate col]\n  (inspect*-col truncate col \"#{\" \\}))\n\n(defmethod inspect* :vector [truncate col]\n  (inspect*-col truncate col \\[ \\]))\n\n(defmethod inspect* :default [truncate x]\n  (pr-str (type x)))\n\n(defn inspect\n  \"Return a string description of the value supplied.\n   May be the a string version of the value itself (e.g. \\\"true\\\")\n   or it may be a description (e.g. \\\"an instance of Foo\\\").\n   If truncate is true then return a very terse version of\n   the inspection.\"\n  ([x] (inspect* false x))\n  ([truncate x] (inspect* truncate x)))\n"]}