{"version":3,"file":"cljs.tools.reader.reader_types.js","sources":["cljs/tools/reader/reader_types.cljs"],"mappings":"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","names":["x__4211__auto__","m__4212__auto__","cljs/tools.reader.reader-types.read-char","goog/typeOf","cljs.core/missing-protocol","cljs/tools.reader.reader-types.peek-char","cljs.tools.reader.reader-types/Reader","cljs.tools.reader.reader-types/read-char","reader","cljs.tools.reader.reader-types/peek-char","cljs/tools.reader.reader-types.unread","cljs.tools.reader.reader-types/IPushbackReader","cljs.tools.reader.reader-types/unread","ch","cljs/tools.reader.reader-types.get-line-number","cljs/tools.reader.reader-types.get-column-number","cljs/tools.reader.reader-types.get-file-name","cljs.tools.reader.reader-types/IndexingReader","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.reader-types/get-file-name","cljs.core/PROTOCOL_SENTINEL","this__4161__auto__","writer__4162__auto__","opt__4163__auto__","cljs.core/-write","cljs.tools.reader.reader-types/StringReader","cljs.tools.reader.reader-types/->StringReader","s","s-len","s-pos","r","cljs.tools.reader.reader-types/NodeReadableReader","cljs.tools.reader.reader-types/->NodeReadableReader","readable","buf","c","cljs.tools.reader.impl.utils/char","cljs.tools.reader.reader-types/PushbackReader","cljs.tools.reader.reader-types/->PushbackReader","rdr","buf-len","buf-pos","js/Error","cljs.tools.reader.reader-types/normalize-newline","cljs.tools.reader.reader-types/IndexingPushbackReader","cljs.tools.reader.reader-types/->IndexingPushbackReader","line","column","line-start?","prev","prev-column","file-name","temp__5457__auto__","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.reader-types/merge-meta","obj","m","orig-meta","cljs.core/meta","cljs.core/with-meta","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader-types/peek-source-log","frames","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.tools.reader.reader-types/log-source-char","char","buffer","cljs.tools.reader.reader-types/drop-last-logged-char","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.reader-types/SourceLoggingPushbackReader","cljs.tools.reader.reader-types/->SourceLoggingPushbackReader","cljs.core/deref","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/string-reader","cljs.core/count","var_args","G__26877","cljs.tools.reader.reader-types/string-push-back-reader","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.core.object_array.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.reader-types/node-readable-push-back-reader","G__26883","cljs.tools.reader.reader-types/indexing-push-back-reader","s-or-rdr","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3","G__26892","cljs.tools.reader.reader-types/source-logging-push-back-reader","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","goog/string.StringBuffer","cljs.tools.reader.reader-types/read-line","cljs.tools.reader.reader-types/source-logging-reader?","cljs.tools.reader.reader-types/line-start?","cljs.tools.reader.reader-types/log-source*","f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/conj","ret","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/rest"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Protocols and default Reader types implementation\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.reader-types\n  (:refer-clojure :exclude [char read-line])\n  (:require [cljs.tools.reader.impl.utils :refer [char whitespace? newline?]]\n            [goog.string])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader protocols\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defprotocol Reader\n  (read-char [reader]\n    \"Returns the next char from the Reader, nil if the end of stream has been reached\")\n  (peek-char [reader]\n    \"Returns the next char from the Reader without removing it from the reader stream\"))\n\n(defprotocol IPushbackReader\n  (unread [reader ch]\n    \"Pushes back a single character on to the stream\"))\n\n(defprotocol IndexingReader\n  (get-line-number [reader]\n    \"Returns the line number of the next character to be read from the stream\")\n  (get-column-number [reader]\n    \"Returns the column number of the next character to be read from the stream\")\n  (get-file-name [reader]\n    \"Returns the file name the reader is reading from, or nil\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader deftypes\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(deftype StringReader\n    [s s-len ^:mutable s-pos]\n  Reader\n  (read-char [reader]\n    (when (> s-len s-pos)\n      (let [r (.charAt s s-pos)]\n        (set! s-pos (inc s-pos))\n        r)))\n  (peek-char [reader]\n    (when (> s-len s-pos)\n      (.charAt s s-pos))))\n\n(deftype NodeReadableReader [readable ^:mutable buf]\n  Reader\n  (read-char [reader]\n    (if buf\n      (let [c (aget buf 0)]\n        (set! buf nil)\n        (char c))\n      (let [c (str (.read readable 1))]\n        (when c\n          (char c)))))\n  (peek-char [reader]\n    (when-not buf\n      (set! buf (str (.read readable 1))))\n    (when buf\n      (char (aget buf 0)))))\n\n(deftype PushbackReader\n  [^not-native rdr buf buf-len ^:mutable buf-pos]\n  Reader\n  (read-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (read-char rdr))]\n      (when (< buf-pos buf-len)\n        (set! buf-pos (inc buf-pos)))\n      (char c)))\n  (peek-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (peek-char rdr))]\n      (char c)))\n  IPushbackReader\n  (unread [reader ch]\n    (when ch\n      (if (zero? buf-pos) (throw (js/Error. \"Pushback buffer is full\")))\n      (set! buf-pos (dec buf-pos))\n      (aset buf buf-pos ch))))\n\n(defn- normalize-newline [^not-native rdr ch]\n  (if (identical? \\return ch)\n    (let [c (peek-char rdr)]\n      (when (or (identical? \\formfeed c)\n                (identical? \\newline c))\n        (read-char rdr))\n      \\newline)\n    ch))\n\n(deftype IndexingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Source Logging support\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn merge-meta\n  \"Returns an object of the same type and value as `obj`, with its\nmetadata merged over `m`.\"\n  [obj m]\n  (let [orig-meta (meta obj)]\n    (with-meta obj (merge m (dissoc orig-meta :source)))))\n\n(defn- peek-source-log\n  \"Returns a string containing the contents of the top most source\nlogging frame.\"\n  [frames]\n  (subs (str (:buffer frames)) (first (:offset frames))))\n\n(defn- log-source-char\n  \"Logs `char` to all currently active source logging frames.\"\n  [frames char]\n  (when-let [buffer (:buffer frames)]\n    (.append buffer char)))\n\n(defn- drop-last-logged-char\n  \"Removes the last logged character from all currently active source\nlogging frames. Called when pushing a character back.\"\n  [frames]\n  (when-let [buffer (:buffer frames)]\n    (.set buffer (subs (str buffer) 0 (dec (.getLength buffer))))))\n\n(deftype SourceLoggingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name frames]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        (log-source-char @frames ch)\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (when ch\n      (drop-last-logged-char @frames))\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; fast check for provided implementations\n(defn indexing-reader?\n  \"Returns true if the reader satisfies IndexingReader\"\n  [rdr]\n  (implements? IndexingReader rdr))\n\n(defn string-reader\n  \"Creates a StringReader from a given string\"\n  ([s]\n     (StringReader. s (count s) 0)))\n\n(defn string-push-back-reader\n  \"Creates a PushbackReader from a given string\"\n  ([s]\n     (string-push-back-reader s 1))\n  ([s buf-len]\n     (PushbackReader. (string-reader s) (object-array buf-len) buf-len buf-len)))\n\n(defn node-readable-push-back-reader [readable]\n  (PushbackReader. (NodeReadableReader. readable nil) (object-array 1) 1 1))\n\n(defn indexing-push-back-reader\n  \"Creates an IndexingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (indexing-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (indexing-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (IndexingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr) 1 1 true nil 0 file-name)))\n\n(defn source-logging-push-back-reader\n  \"Creates a SourceLoggingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (source-logging-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (source-logging-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (SourceLoggingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr)\n      1\n      1\n      true\n      nil\n      0\n      file-name\n      (atom {:buffer (StringBuffer.) :offset '(0)}))))\n\n(defn read-line\n  \"Reads a line from the reader or from *in* if no reader is specified\"\n  ([^not-native rdr]\n     (loop [c (read-char rdr) s (StringBuffer.)]\n       (if (newline? c)\n         (str s)\n         (recur (read-char rdr) (.append s c))))))\n\n(defn ^boolean source-logging-reader?\n  [rdr]\n  (instance? SourceLoggingPushbackReader rdr))\n\n(defn ^boolean line-start?\n  \"Returns true if rdr is an IndexingReader and the current char starts a new line\"\n  [^not-native rdr]\n  (when (indexing-reader? rdr)\n    (== 1 (get-column-number rdr))))\n\n(defn log-source*\n  [reader f]\n  (let [buffer (:buffer @(.-frames reader))]\n    (try\n      (swap! (.-frames reader) update-in [:offset] conj (.getLength buffer))\n      (let [ret (f)]\n        (if (implements? IMeta ret)\n          (merge-meta ret {:source (peek-source-log @ (.-frames reader))})\n          ret))\n      (finally\n        (swap! (.-frames reader) update-in [:offset] rest)))))\n\n"]}